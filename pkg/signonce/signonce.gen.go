// Package signonce provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package signonce

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Address defines model for Address.
type Address = string

// NonceResponse defines model for NonceResponse.
type NonceResponse struct {
	Address *Address `json:"address,omitempty"`
	ChainId *uint64  `json:"chainId,omitempty"`
	Nonce   *uint64  `json:"nonce,omitempty"`
}

// XNonceAuthHash defines model for XNonceAuthHash.
type XNonceAuthHash = string

// XNonceAuthSignature defines model for XNonceAuthSignature.
type XNonceAuthSignature = string

// XNonceAuthSigner defines model for XNonceAuthSigner.
type XNonceAuthSigner = Address

// GetNonceWithSignerParams defines parameters for GetNonceWithSigner.
type GetNonceWithSignerParams struct {
	XNONCEAUTHHASH      XNonceAuthHash      `json:"X-NONCE-AUTH-HASH"`
	XNONCEAUTHSIGNATURE XNonceAuthSignature `json:"X-NONCE-AUTH-SIGNATURE"`
	XNONCEAUTHSIGNER    XNonceAuthSigner    `json:"X-NONCE-AUTH-SIGNER"`
}

// ReturnNonceWithSignerParams defines parameters for ReturnNonceWithSigner.
type ReturnNonceWithSignerParams struct {
	XNONCEAUTHHASH      XNonceAuthHash      `json:"X-NONCE-AUTH-HASH"`
	XNONCEAUTHSIGNATURE XNonceAuthSignature `json:"X-NONCE-AUTH-SIGNATURE"`
	XNONCEAUTHSIGNER    XNonceAuthSigner    `json:"X-NONCE-AUTH-SIGNER"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNonce request
	GetNonce(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNonceWithSigner request
	GetNonceWithSigner(ctx context.Context, contract Address, chainId uint64, address Address, params *GetNonceWithSignerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyncNonce request
	SyncNonce(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReturnNonce request
	ReturnNonce(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReturnNonceWithSigner request
	ReturnNonceWithSigner(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, params *ReturnNonceWithSignerParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNonce(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNonceRequest(c.Server, contract, chainId, address)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNonceWithSigner(ctx context.Context, contract Address, chainId uint64, address Address, params *GetNonceWithSignerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNonceWithSignerRequest(c.Server, contract, chainId, address, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncNonce(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncNonceRequest(c.Server, contract, chainId, address)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReturnNonce(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReturnNonceRequest(c.Server, contract, chainId, address, nonce)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReturnNonceWithSigner(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, params *ReturnNonceWithSignerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReturnNonceWithSignerRequest(c.Server, contract, chainId, address, nonce, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNonceRequest generates requests for GetNonce
func NewGetNonceRequest(server string, contract Address, chainId uint64, address Address) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract", runtime.ParamLocationPath, contract)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chainId", runtime.ParamLocationPath, chainId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signonce/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNonceWithSignerRequest generates requests for GetNonceWithSigner
func NewGetNonceWithSignerRequest(server string, contract Address, chainId uint64, address Address, params *GetNonceWithSignerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract", runtime.ParamLocationPath, contract)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chainId", runtime.ParamLocationPath, chainId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signonce/%s/%s/%s/signed", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-NONCE-AUTH-HASH", runtime.ParamLocationHeader, params.XNONCEAUTHHASH)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-NONCE-AUTH-HASH", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-NONCE-AUTH-SIGNATURE", runtime.ParamLocationHeader, params.XNONCEAUTHSIGNATURE)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-NONCE-AUTH-SIGNATURE", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-NONCE-AUTH-SIGNER", runtime.ParamLocationHeader, params.XNONCEAUTHSIGNER)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-NONCE-AUTH-SIGNER", headerParam2)

	return req, nil
}

// NewSyncNonceRequest generates requests for SyncNonce
func NewSyncNonceRequest(server string, contract Address, chainId uint64, address Address) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract", runtime.ParamLocationPath, contract)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chainId", runtime.ParamLocationPath, chainId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signonce/%s/%s/%s/sync", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReturnNonceRequest generates requests for ReturnNonce
func NewReturnNonceRequest(server string, contract Address, chainId uint64, address Address, nonce uint64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract", runtime.ParamLocationPath, contract)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chainId", runtime.ParamLocationPath, chainId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "nonce", runtime.ParamLocationPath, nonce)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signonce/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReturnNonceWithSignerRequest generates requests for ReturnNonceWithSigner
func NewReturnNonceWithSignerRequest(server string, contract Address, chainId uint64, address Address, nonce uint64, params *ReturnNonceWithSignerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract", runtime.ParamLocationPath, contract)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chainId", runtime.ParamLocationPath, chainId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "nonce", runtime.ParamLocationPath, nonce)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signonce/%s/%s/%s/%s/signed", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-NONCE-AUTH-HASH", runtime.ParamLocationHeader, params.XNONCEAUTHHASH)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-NONCE-AUTH-HASH", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-NONCE-AUTH-SIGNATURE", runtime.ParamLocationHeader, params.XNONCEAUTHSIGNATURE)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-NONCE-AUTH-SIGNATURE", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-NONCE-AUTH-SIGNER", runtime.ParamLocationHeader, params.XNONCEAUTHSIGNER)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-NONCE-AUTH-SIGNER", headerParam2)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNonce request
	GetNonceWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*GetNonceResponse, error)

	// GetNonceWithSigner request
	GetNonceWithSignerWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, params *GetNonceWithSignerParams, reqEditors ...RequestEditorFn) (*GetNonceWithSignerResponse, error)

	// SyncNonce request
	SyncNonceWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*SyncNonceResponse, error)

	// ReturnNonce request
	ReturnNonceWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, reqEditors ...RequestEditorFn) (*ReturnNonceResponse, error)

	// ReturnNonceWithSigner request
	ReturnNonceWithSignerWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, params *ReturnNonceWithSignerParams, reqEditors ...RequestEditorFn) (*ReturnNonceWithSignerResponse, error)
}

type GetNonceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NonceResponse
}

// Status returns HTTPResponse.Status
func (r GetNonceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNonceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNonceWithSignerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NonceResponse
}

// Status returns HTTPResponse.Status
func (r GetNonceWithSignerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNonceWithSignerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyncNonceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SyncNonceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyncNonceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReturnNonceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReturnNonceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReturnNonceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReturnNonceWithSignerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReturnNonceWithSignerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReturnNonceWithSignerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNonceWithResponse request returning *GetNonceResponse
func (c *ClientWithResponses) GetNonceWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*GetNonceResponse, error) {
	rsp, err := c.GetNonce(ctx, contract, chainId, address, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNonceResponse(rsp)
}

// GetNonceWithSignerWithResponse request returning *GetNonceWithSignerResponse
func (c *ClientWithResponses) GetNonceWithSignerWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, params *GetNonceWithSignerParams, reqEditors ...RequestEditorFn) (*GetNonceWithSignerResponse, error) {
	rsp, err := c.GetNonceWithSigner(ctx, contract, chainId, address, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNonceWithSignerResponse(rsp)
}

// SyncNonceWithResponse request returning *SyncNonceResponse
func (c *ClientWithResponses) SyncNonceWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, reqEditors ...RequestEditorFn) (*SyncNonceResponse, error) {
	rsp, err := c.SyncNonce(ctx, contract, chainId, address, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncNonceResponse(rsp)
}

// ReturnNonceWithResponse request returning *ReturnNonceResponse
func (c *ClientWithResponses) ReturnNonceWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, reqEditors ...RequestEditorFn) (*ReturnNonceResponse, error) {
	rsp, err := c.ReturnNonce(ctx, contract, chainId, address, nonce, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReturnNonceResponse(rsp)
}

// ReturnNonceWithSignerWithResponse request returning *ReturnNonceWithSignerResponse
func (c *ClientWithResponses) ReturnNonceWithSignerWithResponse(ctx context.Context, contract Address, chainId uint64, address Address, nonce uint64, params *ReturnNonceWithSignerParams, reqEditors ...RequestEditorFn) (*ReturnNonceWithSignerResponse, error) {
	rsp, err := c.ReturnNonceWithSigner(ctx, contract, chainId, address, nonce, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReturnNonceWithSignerResponse(rsp)
}

// ParseGetNonceResponse parses an HTTP response from a GetNonceWithResponse call
func ParseGetNonceResponse(rsp *http.Response) (*GetNonceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNonceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NonceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNonceWithSignerResponse parses an HTTP response from a GetNonceWithSignerWithResponse call
func ParseGetNonceWithSignerResponse(rsp *http.Response) (*GetNonceWithSignerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNonceWithSignerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NonceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSyncNonceResponse parses an HTTP response from a SyncNonceWithResponse call
func ParseSyncNonceResponse(rsp *http.Response) (*SyncNonceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyncNonceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReturnNonceResponse parses an HTTP response from a ReturnNonceWithResponse call
func ParseReturnNonceResponse(rsp *http.Response) (*ReturnNonceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReturnNonceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReturnNonceWithSignerResponse parses an HTTP response from a ReturnNonceWithSignerWithResponse call
func ParseReturnNonceWithSignerResponse(rsp *http.Response) (*ReturnNonceWithSignerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReturnNonceWithSignerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieves the next available nonce
	// (POST /signonce/{contract}/{chainId}/{address})
	GetNonce(ctx echo.Context, contract Address, chainId uint64, address Address) error
	// Retrieves the next available nonce
	// (POST /signonce/{contract}/{chainId}/{address}/signed)
	GetNonceWithSigner(ctx echo.Context, contract Address, chainId uint64, address Address, params GetNonceWithSignerParams) error
	// Synchronize nonce with blockchain
	// (POST /signonce/{contract}/{chainId}/{address}/sync)
	SyncNonce(ctx echo.Context, contract Address, chainId uint64, address Address) error
	// Returns unused nonce
	// (PUT /signonce/{contract}/{chainId}/{address}/{nonce})
	ReturnNonce(ctx echo.Context, contract Address, chainId uint64, address Address, nonce uint64) error
	// Returns unused nonce
	// (PUT /signonce/{contract}/{chainId}/{address}/{nonce}/signed)
	ReturnNonceWithSigner(ctx echo.Context, contract Address, chainId uint64, address Address, nonce uint64, params ReturnNonceWithSignerParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetNonce converts echo context to params.
func (w *ServerInterfaceWrapper) GetNonce(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contract" -------------
	var contract Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract", runtime.ParamLocationPath, ctx.Param("contract"), &contract)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contract: %s", err))
	}

	// ------------- Path parameter "chainId" -------------
	var chainId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "chainId", runtime.ParamLocationPath, ctx.Param("chainId"), &chainId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chainId: %s", err))
	}

	// ------------- Path parameter "address" -------------
	var address Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNonce(ctx, contract, chainId, address)
	return err
}

// GetNonceWithSigner converts echo context to params.
func (w *ServerInterfaceWrapper) GetNonceWithSigner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contract" -------------
	var contract Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract", runtime.ParamLocationPath, ctx.Param("contract"), &contract)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contract: %s", err))
	}

	// ------------- Path parameter "chainId" -------------
	var chainId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "chainId", runtime.ParamLocationPath, ctx.Param("chainId"), &chainId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chainId: %s", err))
	}

	// ------------- Path parameter "address" -------------
	var address Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNonceWithSignerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-NONCE-AUTH-HASH" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-NONCE-AUTH-HASH")]; found {
		var XNONCEAUTHHASH XNonceAuthHash
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-NONCE-AUTH-HASH, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-NONCE-AUTH-HASH", runtime.ParamLocationHeader, valueList[0], &XNONCEAUTHHASH)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-NONCE-AUTH-HASH: %s", err))
		}

		params.XNONCEAUTHHASH = XNONCEAUTHHASH
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-NONCE-AUTH-HASH is required, but not found"))
	}
	// ------------- Required header parameter "X-NONCE-AUTH-SIGNATURE" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-NONCE-AUTH-SIGNATURE")]; found {
		var XNONCEAUTHSIGNATURE XNonceAuthSignature
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-NONCE-AUTH-SIGNATURE, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-NONCE-AUTH-SIGNATURE", runtime.ParamLocationHeader, valueList[0], &XNONCEAUTHSIGNATURE)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-NONCE-AUTH-SIGNATURE: %s", err))
		}

		params.XNONCEAUTHSIGNATURE = XNONCEAUTHSIGNATURE
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-NONCE-AUTH-SIGNATURE is required, but not found"))
	}
	// ------------- Required header parameter "X-NONCE-AUTH-SIGNER" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-NONCE-AUTH-SIGNER")]; found {
		var XNONCEAUTHSIGNER XNonceAuthSigner
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-NONCE-AUTH-SIGNER, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-NONCE-AUTH-SIGNER", runtime.ParamLocationHeader, valueList[0], &XNONCEAUTHSIGNER)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-NONCE-AUTH-SIGNER: %s", err))
		}

		params.XNONCEAUTHSIGNER = XNONCEAUTHSIGNER
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-NONCE-AUTH-SIGNER is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNonceWithSigner(ctx, contract, chainId, address, params)
	return err
}

// SyncNonce converts echo context to params.
func (w *ServerInterfaceWrapper) SyncNonce(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contract" -------------
	var contract Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract", runtime.ParamLocationPath, ctx.Param("contract"), &contract)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contract: %s", err))
	}

	// ------------- Path parameter "chainId" -------------
	var chainId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "chainId", runtime.ParamLocationPath, ctx.Param("chainId"), &chainId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chainId: %s", err))
	}

	// ------------- Path parameter "address" -------------
	var address Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SyncNonce(ctx, contract, chainId, address)
	return err
}

// ReturnNonce converts echo context to params.
func (w *ServerInterfaceWrapper) ReturnNonce(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contract" -------------
	var contract Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract", runtime.ParamLocationPath, ctx.Param("contract"), &contract)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contract: %s", err))
	}

	// ------------- Path parameter "chainId" -------------
	var chainId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "chainId", runtime.ParamLocationPath, ctx.Param("chainId"), &chainId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chainId: %s", err))
	}

	// ------------- Path parameter "address" -------------
	var address Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "nonce" -------------
	var nonce uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "nonce", runtime.ParamLocationPath, ctx.Param("nonce"), &nonce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nonce: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReturnNonce(ctx, contract, chainId, address, nonce)
	return err
}

// ReturnNonceWithSigner converts echo context to params.
func (w *ServerInterfaceWrapper) ReturnNonceWithSigner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contract" -------------
	var contract Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract", runtime.ParamLocationPath, ctx.Param("contract"), &contract)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contract: %s", err))
	}

	// ------------- Path parameter "chainId" -------------
	var chainId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "chainId", runtime.ParamLocationPath, ctx.Param("chainId"), &chainId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chainId: %s", err))
	}

	// ------------- Path parameter "address" -------------
	var address Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "nonce" -------------
	var nonce uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "nonce", runtime.ParamLocationPath, ctx.Param("nonce"), &nonce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nonce: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReturnNonceWithSignerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-NONCE-AUTH-HASH" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-NONCE-AUTH-HASH")]; found {
		var XNONCEAUTHHASH XNonceAuthHash
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-NONCE-AUTH-HASH, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-NONCE-AUTH-HASH", runtime.ParamLocationHeader, valueList[0], &XNONCEAUTHHASH)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-NONCE-AUTH-HASH: %s", err))
		}

		params.XNONCEAUTHHASH = XNONCEAUTHHASH
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-NONCE-AUTH-HASH is required, but not found"))
	}
	// ------------- Required header parameter "X-NONCE-AUTH-SIGNATURE" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-NONCE-AUTH-SIGNATURE")]; found {
		var XNONCEAUTHSIGNATURE XNonceAuthSignature
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-NONCE-AUTH-SIGNATURE, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-NONCE-AUTH-SIGNATURE", runtime.ParamLocationHeader, valueList[0], &XNONCEAUTHSIGNATURE)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-NONCE-AUTH-SIGNATURE: %s", err))
		}

		params.XNONCEAUTHSIGNATURE = XNONCEAUTHSIGNATURE
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-NONCE-AUTH-SIGNATURE is required, but not found"))
	}
	// ------------- Required header parameter "X-NONCE-AUTH-SIGNER" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-NONCE-AUTH-SIGNER")]; found {
		var XNONCEAUTHSIGNER XNonceAuthSigner
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-NONCE-AUTH-SIGNER, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-NONCE-AUTH-SIGNER", runtime.ParamLocationHeader, valueList[0], &XNONCEAUTHSIGNER)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-NONCE-AUTH-SIGNER: %s", err))
		}

		params.XNONCEAUTHSIGNER = XNONCEAUTHSIGNER
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-NONCE-AUTH-SIGNER is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReturnNonceWithSigner(ctx, contract, chainId, address, nonce, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/signonce/:contract/:chainId/:address", wrapper.GetNonce)
	router.POST(baseURL+"/signonce/:contract/:chainId/:address/signed", wrapper.GetNonceWithSigner)
	router.POST(baseURL+"/signonce/:contract/:chainId/:address/sync", wrapper.SyncNonce)
	router.PUT(baseURL+"/signonce/:contract/:chainId/:address/:nonce", wrapper.ReturnNonce)
	router.PUT(baseURL+"/signonce/:contract/:chainId/:address/:nonce/signed", wrapper.ReturnNonceWithSigner)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW4U7cRhB+ldU2P3135riA4l+9kEuIqpIKkjYSotLces7exN51d9eGq+WH6QP0KfJi",
	"1ax9GAgE01CaSPzjltmZb+b7vvXUXOi80AqVszyqeQEGcnRo/K/3B1oJnJcu3Qeb0olUPOIpQoyGB1xB",
	"jjzi70cHbw72FqP5u7f7o/350T4PuME/Smkw5pEzJQbcihRzoBRuXdAl64xUCW+a4EKZI5kocKXBYbWO",
	"Xr86mL99d7j4qoJohldbHH6x1BODKx7xHyb9VCftf+1kHscGreUNIegO6c7mPKo5nkFeZFQ4PHs+nW0/",
	"nT7d3tvdeinm093lYrY1DXcWz6e7z7YXsxluvVjtLHde8IAX4Bwawv97eHYMo9V89DIcPTupZ2HzhAdX",
	"BxBw3/4h2kIr60ddGF2gcRI9DOgRDWoo4CIFqV7HdGOlTQ6OR7yUyu3M+vJSOUzQULii+sOCm/MjvfyA",
	"wvkTi6I00q2PCEmLeYlg0BCl9MtDpEvtcZ83da5oGZBqpSlUaOVAOD/+HGTGI16ByKAaF1BlUv2Y0OlY",
	"6LyXxa+f/qII9gtU2ae/FbUUoxVGFk5q4mFPK2dAOHYuaOZnzn4GBQkaBlmmTy1bacMo8KNUCbMyYX4y",
	"7Tko1hHBQMUMmNgkdZpBpWXMhM4yaaVWljqUzkvnhpI84BUa2+ILx+F4i2DrAhUUkkd8exyOp62YUj/R",
	"iZWJhzOpN5WbSd0x3UzqDlzj9aOtn+DlKRyiMxIrtMylyBSeOQYVyAyWGbad+s7KIgbXBZ0Pg+ghbVAm",
	"D9P4v0lj/BU635pH279Xx52JqYOeqw32e/BtcG2BjVv+q/wbb30p/wAfndD91vGe3mkYbuSPypMHRZFJ",
	"4cc8+WCJwXpgC5ffE2+vy0p489Ml33quLjr2+ITw2TLPwawHKYdahIRY716TEyowVLM+DuP/T7q/yfNv",
	"z6OIh4s4uB5FP8DJlZXlTjf67ePO1wjdN+GwB7TQWombDXS0ViI1Wsk/0XaGUWW+RMNOpUvZMtPio0/q",
	"faQrNKdGeisNsRFlf/wE3NMn4BYhXWCyI/IKg1+po9pHtWtEef1TXBplWalKi3EHwekb31y/PK1K41I0",
	"rLT4mXjahI/y+ReP7zXJN0/JwynzDkvEZ8K5H61eXB8eWrKPm8O3Jt7vcSm5fXkYZJ3b7Nj8EwAA//+2",
	"KiDbYBIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
