// Package signer provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package signer

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Address defines model for Address.
type Address = string

// NewSignerResponse defines model for NewSignerResponse.
type NewSignerResponse struct {
	PublicKey *Address `json:"publicKey,omitempty"`
}

// SignBytes defines model for SignBytes.
type SignBytes struct {
	Bytes *[]byte `json:"bytes,omitempty"`
}

// SignBytesResponse defines model for SignBytesResponse.
type SignBytesResponse struct {
	SignedData *[]byte `json:"signedData,omitempty"`
}

// SignerKey defines model for SignerKey.
type SignerKey struct {
	Key *string `json:"key,omitempty"`
}

// PostSignerNewJSONBody defines parameters for PostSignerNew.
type PostSignerNewJSONBody = SignerKey

// PostSignerAddressBytesJSONBody defines parameters for PostSignerAddressBytes.
type PostSignerAddressBytesJSONBody = SignBytes

// PostSignerAddressBytesParams defines parameters for PostSignerAddressBytes.
type PostSignerAddressBytesParams struct {
	Authorization string `json:"Authorization"`
}

// PutSignerAddressKeyJSONBody defines parameters for PutSignerAddressKey.
type PutSignerAddressKeyJSONBody = SignerKey

// PutSignerAddressKeyParams defines parameters for PutSignerAddressKey.
type PutSignerAddressKeyParams struct {
	Authorization string `json:"Authorization"`
}

// PostSignerNewJSONRequestBody defines body for PostSignerNew for application/json ContentType.
type PostSignerNewJSONRequestBody = PostSignerNewJSONBody

// PostSignerAddressBytesJSONRequestBody defines body for PostSignerAddressBytes for application/json ContentType.
type PostSignerAddressBytesJSONRequestBody = PostSignerAddressBytesJSONBody

// PutSignerAddressKeyJSONRequestBody defines body for PutSignerAddressKey for application/json ContentType.
type PutSignerAddressKeyJSONRequestBody = PutSignerAddressKeyJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostSignerNew request with any body
	PostSignerNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSignerNew(ctx context.Context, body PostSignerNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSignerAddressBytes request with any body
	PostSignerAddressBytesWithBody(ctx context.Context, address Address, params *PostSignerAddressBytesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSignerAddressBytes(ctx context.Context, address Address, params *PostSignerAddressBytesParams, body PostSignerAddressBytesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSignerAddressKey request with any body
	PutSignerAddressKeyWithBody(ctx context.Context, address Address, params *PutSignerAddressKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSignerAddressKey(ctx context.Context, address Address, params *PutSignerAddressKeyParams, body PutSignerAddressKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostSignerNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignerNewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignerNew(ctx context.Context, body PostSignerNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignerNewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignerAddressBytesWithBody(ctx context.Context, address Address, params *PostSignerAddressBytesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignerAddressBytesRequestWithBody(c.Server, address, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignerAddressBytes(ctx context.Context, address Address, params *PostSignerAddressBytesParams, body PostSignerAddressBytesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignerAddressBytesRequest(c.Server, address, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSignerAddressKeyWithBody(ctx context.Context, address Address, params *PutSignerAddressKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSignerAddressKeyRequestWithBody(c.Server, address, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSignerAddressKey(ctx context.Context, address Address, params *PutSignerAddressKeyParams, body PutSignerAddressKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSignerAddressKeyRequest(c.Server, address, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostSignerNewRequest calls the generic PostSignerNew builder with application/json body
func NewPostSignerNewRequest(server string, body PostSignerNewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSignerNewRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSignerNewRequestWithBody generates requests for PostSignerNew with any type of body
func NewPostSignerNewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signer/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSignerAddressBytesRequest calls the generic PostSignerAddressBytes builder with application/json body
func NewPostSignerAddressBytesRequest(server string, address Address, params *PostSignerAddressBytesParams, body PostSignerAddressBytesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSignerAddressBytesRequestWithBody(server, address, params, "application/json", bodyReader)
}

// NewPostSignerAddressBytesRequestWithBody generates requests for PostSignerAddressBytes with any type of body
func NewPostSignerAddressBytesRequestWithBody(server string, address Address, params *PostSignerAddressBytesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signer/%s/bytes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	return req, nil
}

// NewPutSignerAddressKeyRequest calls the generic PutSignerAddressKey builder with application/json body
func NewPutSignerAddressKeyRequest(server string, address Address, params *PutSignerAddressKeyParams, body PutSignerAddressKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSignerAddressKeyRequestWithBody(server, address, params, "application/json", bodyReader)
}

// NewPutSignerAddressKeyRequestWithBody generates requests for PutSignerAddressKey with any type of body
func NewPutSignerAddressKeyRequestWithBody(server string, address Address, params *PutSignerAddressKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signer/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostSignerNew request with any body
	PostSignerNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignerNewResponse, error)

	PostSignerNewWithResponse(ctx context.Context, body PostSignerNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignerNewResponse, error)

	// PostSignerAddressBytes request with any body
	PostSignerAddressBytesWithBodyWithResponse(ctx context.Context, address Address, params *PostSignerAddressBytesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignerAddressBytesResponse, error)

	PostSignerAddressBytesWithResponse(ctx context.Context, address Address, params *PostSignerAddressBytesParams, body PostSignerAddressBytesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignerAddressBytesResponse, error)

	// PutSignerAddressKey request with any body
	PutSignerAddressKeyWithBodyWithResponse(ctx context.Context, address Address, params *PutSignerAddressKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSignerAddressKeyResponse, error)

	PutSignerAddressKeyWithResponse(ctx context.Context, address Address, params *PutSignerAddressKeyParams, body PutSignerAddressKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSignerAddressKeyResponse, error)
}

type PostSignerNewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewSignerResponse
}

// Status returns HTTPResponse.Status
func (r PostSignerNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSignerNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSignerAddressBytesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignBytesResponse
}

// Status returns HTTPResponse.Status
func (r PostSignerAddressBytesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSignerAddressBytesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSignerAddressKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSignerAddressKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSignerAddressKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostSignerNewWithBodyWithResponse request with arbitrary body returning *PostSignerNewResponse
func (c *ClientWithResponses) PostSignerNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignerNewResponse, error) {
	rsp, err := c.PostSignerNewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignerNewResponse(rsp)
}

func (c *ClientWithResponses) PostSignerNewWithResponse(ctx context.Context, body PostSignerNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignerNewResponse, error) {
	rsp, err := c.PostSignerNew(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignerNewResponse(rsp)
}

// PostSignerAddressBytesWithBodyWithResponse request with arbitrary body returning *PostSignerAddressBytesResponse
func (c *ClientWithResponses) PostSignerAddressBytesWithBodyWithResponse(ctx context.Context, address Address, params *PostSignerAddressBytesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignerAddressBytesResponse, error) {
	rsp, err := c.PostSignerAddressBytesWithBody(ctx, address, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignerAddressBytesResponse(rsp)
}

func (c *ClientWithResponses) PostSignerAddressBytesWithResponse(ctx context.Context, address Address, params *PostSignerAddressBytesParams, body PostSignerAddressBytesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignerAddressBytesResponse, error) {
	rsp, err := c.PostSignerAddressBytes(ctx, address, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignerAddressBytesResponse(rsp)
}

// PutSignerAddressKeyWithBodyWithResponse request with arbitrary body returning *PutSignerAddressKeyResponse
func (c *ClientWithResponses) PutSignerAddressKeyWithBodyWithResponse(ctx context.Context, address Address, params *PutSignerAddressKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSignerAddressKeyResponse, error) {
	rsp, err := c.PutSignerAddressKeyWithBody(ctx, address, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSignerAddressKeyResponse(rsp)
}

func (c *ClientWithResponses) PutSignerAddressKeyWithResponse(ctx context.Context, address Address, params *PutSignerAddressKeyParams, body PutSignerAddressKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSignerAddressKeyResponse, error) {
	rsp, err := c.PutSignerAddressKey(ctx, address, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSignerAddressKeyResponse(rsp)
}

// ParsePostSignerNewResponse parses an HTTP response from a PostSignerNewWithResponse call
func ParsePostSignerNewResponse(rsp *http.Response) (*PostSignerNewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSignerNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewSignerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSignerAddressBytesResponse parses an HTTP response from a PostSignerAddressBytesWithResponse call
func ParsePostSignerAddressBytesResponse(rsp *http.Response) (*PostSignerAddressBytesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSignerAddressBytesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignBytesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSignerAddressKeyResponse parses an HTTP response from a PutSignerAddressKeyWithResponse call
func ParsePutSignerAddressKeyResponse(rsp *http.Response) (*PutSignerAddressKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSignerAddressKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates new signer
	// (POST /signer/new)
	PostSignerNew(ctx echo.Context) error
	// Signes bytes
	// (POST /signer/{address}/bytes)
	PostSignerAddressBytes(ctx echo.Context, address Address, params PostSignerAddressBytesParams) error
	// Replace the API key
	// (PUT /signer/{address}/key)
	PutSignerAddressKey(ctx echo.Context, address Address, params PutSignerAddressKeyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSignerNew converts echo context to params.
func (w *ServerInterfaceWrapper) PostSignerNew(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSignerNew(ctx)
	return err
}

// PostSignerAddressBytes converts echo context to params.
func (w *ServerInterfaceWrapper) PostSignerAddressBytes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSignerAddressBytesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSignerAddressBytes(ctx, address, params)
	return err
}

// PutSignerAddressKey converts echo context to params.
func (w *ServerInterfaceWrapper) PutSignerAddressKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutSignerAddressKeyParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSignerAddressKey(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/signer/new", wrapper.PostSignerNew)
	router.POST(baseURL+"/signer/:address/bytes", wrapper.PostSignerAddressBytes)
	router.PUT(baseURL+"/signer/:address/key", wrapper.PutSignerAddressKey)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xUW27rNhDdCjG9n4oty74Jrr5q3zhFkCIN0qL9CFJgLI0tJhLJkiM7ruHFdAFdRTZW",
	"kJKTOM7DQNN+3T9pQJ5z5szhrCDTldGKFDtIV+CygioMn8M8t+TCJ91hZUqCFOK7UTLof04+978e9U6y",
	"YXI0GQ96SXw4HiVHX/rjwYB6x9PDyeExRGCQmayCFH6P767wYDo8OIkPvlyvBvH6E0TAS+MxHVupZrCO",
	"4JwWP8uZIntJzmjlyJMbqw1ZlhSkmHpSyuyMlv7nk6UppPBd97GJbttBdyN/vX4g0pMbytgTeZbRklvI",
	"LYLJpjzVtkKGNFR21b4J+7p+5/vLj5HxX3CQbQ3Yxr5tipVUP5KacQFpP9kD05ekmmp/N9OKMeMw9Apl",
	"CSnMMStx3jE4L6X6fuarnUxXEIHCyuP8ev+XPyEucF7e/628yJxcZqVhqf30x1yQpboSv2FZEoumBVGh",
	"whk5sQhVJ1DlgguSVhgr58gkbmnZlL1rTjhSLHJvXQQsOQSywYII5mRdQxd34k7Pq9CGFBoJKfQ7cSdp",
	"ElkEq7phDraraBF81C70vK37B1JkkckJRYtWZpBToXFCsmAtUMzknJQYXpx6uRBYLXqE0xxSuNCOG43n",
	"tIAILP1Rk+ORzpcbv0kFbjSmlFm42b1xXsDmOb4X9cdIhFl6Cmkph5RtTaHQpDF0nsTxhxHvvtcgYNvF",
	"n85C6FxdVWiXkMJXSw+mus34GGcO0itoC9f+ymZIK2ze8rr78DhfHlgQ40Q41aRFKjHxVr8+lnZPNNvA",
	"J8RiRUzWq1mB9LAFYR5EtoEf1lxoK/8McPDc8OiJeTtvr0X0OXzEa9t7E2m/VXf93wWsMeh/DtjuQt0n",
	"YE9jsHe02uVp6hdy9UshnaiIC50LLEu9cH5RCb3wa4y1sJr9uvK1V/dAvZ23s3DmW9o+aJ29k4hLMiVm",
	"zye0G4z1+p8AAAD//01q56oRCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
